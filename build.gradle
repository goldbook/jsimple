class JavaToCSharpConverterTask extends DefaultTask {
    /**
     * Java main source directory.  Defaults to ${project.build.sourceDirectory}.
     */
    //@Parameter(defaultValue = "${project.build.sourceDirectory}", property = "sourceDirectory", required = false)
    File sourceDirectory = project.file('src/main/java')

    /**
     * Directory for generated C# for main source.  Defaults to ${project.basedir}/c#.
     */
    //@Parameter(defaultValue = "${project.basedir}/c#", property = "outputDirectory", required = false)
    File outputDirectory = project.file('c#')

    /**
     * Java test source directory.  Defaults to ${project.build.testSourceDirectory}.  If this directory doesn't exist,
     * then no test sources are converted.
     */
    //@Parameter(defaultValue = "${project.build.testSourceDirectory}", property = "testSourceDirectory", required = false)
    File testSourceDirectory = project.file('src/test/java')

    /**
     * Directory for generated C# for test source.  Defaults to ${project.basedir}/c#-test.
     */
    //@Parameter(defaultValue = "${project.basedir}/c#-test", property = "testOutputDirectory", required = false)
    File testOutputDirectory = project.file('c#-test')

    /**
     * Directory that contains the converter.  Java to C# Converter.exe must be in this directory.
     */
    //@Parameter(property = "converterDirectory", required = true)
    File converterDirectory;

    /**
     * Path to converter settings file (which normally has a .dat extension).
     */
    //@Parameter(property = "converterSettings", required = true)
    File converterSettings;

    /**
     * If true, don't do anything.  Defaults to the skipConversion global property.  Thus "mvn -DskipConversion" will
     * skip the Java -> C# conversion.
     */
    //@Parameter(defaultValue = "${skipConversion}", property = "skipConversion", required = false)
    boolean skip;

    /**
     * If true (the default), run the converter in a minimized window via "cmd /c start /min".  That avoids the
     * converter window flashing for an instant.
     */
    //@Parameter(property = "runMinimized", defaultValue = "true", required = false)
    boolean runMinimized = true;

    @TaskAction def convert() {
        if (skip)
            return;

        deleteGeneratedDirectories(outputDirectory);

        doConvert([
                sourceDirectory.getAbsolutePath(),
                outputDirectory.getAbsolutePath(),
                converterSettings.getAbsolutePath()
        ])

        if (testSourceDirectory.exists()) {
            deleteGeneratedDirectories(testOutputDirectory);

            doConvert([
                    testSourceDirectory.getAbsolutePath(),
                    testOutputDirectory.getAbsolutePath(),
                    converterSettings.getAbsolutePath()
            ])
        }
    }

    private void doConvert(List<String> converterArgs) {
        def logger = getLogger();

        def completeArgs = []

        if (runMinimized) {
            completeArgs.add("cmd.exe")
            completeArgs.add("/c")
            completeArgs.add("start")
            completeArgs.add("/min")
            completeArgs.add("/b")
            completeArgs.add("C# Converter")
        }

        completeArgs.add(new File(converterDirectory, "Java to C# Converter.exe").getPath());

        completeArgs.addAll(converterArgs);

        StringBuilder command = new StringBuilder();
        for (String arg : completeArgs)
            command.append(arg + " ");
        logger.debug("Executing: " + command);

        println "Converting..."

        Process process = completeArgs.execute((List) null, converterDirectory);
        process.waitFor()

        def stdOutText = new StringBuffer()
        def stdErrText = new StringBuffer()

        process.consumeProcessOutput(stdOutText, stdErrText)

        stdOutText.eachLine { line -> logger.lifecycle(line) }
        stdErrText.eachLine { line -> logger.error(line) }

        println "done"
    }

    private static void deleteGeneratedDirectories(File path) {
        if (path.isDirectory()) {
            for (File child : path.listFiles()) {
                String name = child.getName();

                if (child.isDirectory() && !name.equals("Properties") && !name.equals("nontranslated") &&
                        !name.equalsIgnoreCase("Bin") && !name.equalsIgnoreCase("obj"))
                    child.deleteDir();
            }
        }
    }
}

def csConverterDirectory = file('third-party/java-to-csharp-converter')
def csConverterSettings = file('std-java-to-c#-converter-settings.dat')

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.nokia.jsimple'
    version = '100.0-SNAPSHOT'

    task csConvert(type: JavaToCSharpConverterTask) {
        converterDirectory = csConverterDirectory
        converterSettings = csConverterSettings
    }

    task all {
        dependsOn build, csConvert
    }

    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java", "src/main/java-nontranslated"]
            }
        }
    }

    repositories {
        mavenCentral()
        // mavenLocal()

        maven { url "http://types.cs.washington.edu/m2-repo" }
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}
