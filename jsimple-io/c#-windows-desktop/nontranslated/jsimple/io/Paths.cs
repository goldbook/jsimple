using System;
using System.IO.IsolatedStorage;

namespace jsimple.io
{
    public class Paths : PathsBase
    {
        private static readonly object lockObject = new Object();
        static volatile FileSystemDirectory applicationDataDirectory = null;

        /// <returns> the directory where the application should store its private data. </returns>
        public static Directory ApplicationDataDirectory
        {
            get
            {
                if (applicationDataDirectory == null)
                {
                    lock (lockObject)
                    {
                        if (applicationDataDirectory == null)
                            applicationDataDirectory = new FileSystemDirectory("c:\\foo");
                    }
                }
                return applicationDataDirectory;
            }
        }

        /// <summary>
        /// Get the test output directory for the specified test name.  This directory is normally under
        /// <projectBase>/target/test-output/<testName>.  Any existing directory will have its contents deleted by this
        /// method, before returning.  The idea here is that test output sticks around after the tests are run, so it can be
        /// inspected to maybe do some debugging.  But it's under "target" so it shouldn't show up as new files for source
        /// control, just intermediate output generated by the build.
        /// </summary>
        /// <param name="testName"> test name, used as part of directory name </param>
        /// <returns> directory to hold test output </returns>
        public static Directory getTestOutputDirectory(string testName)
        {
            Directory projectDirectory = Paths.ApplicationDataDirectory;
            Directory testOutputBase = projectDirectory.getOrCreateDirectory("target").getOrCreateDirectory("test-output");

            return testOutputBase.getOrCreateDirectory(testName);
        }
    }
}