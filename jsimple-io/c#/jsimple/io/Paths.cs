using System;

namespace jsimple.io
{



	/// <summary>
	/// Created with IntelliJ IDEA.
	/// 
	/// @author Bret Johnson
	/// @since 1/19/13 4:31 PM
	/// </summary>
	public abstract class Paths
	{
		public static volatile Paths instance = null;

		public static Paths Instance
		{
			get
			{
				if (instance == null)
					throw new Exception("Paths instance isn't set; did you forget to call JSimpleIO.init()?");
				return instance;
			}
			set
			{
				Paths.instance = value;
			}
		}


		/// <returns> the directory where the application should store its private data. </returns>
		public abstract Directory ApplicationDataDirectory {get;}

		/// <summary>
		/// Return the Directory object corresponding to the string serialized representation.  If the directory doesn't
		/// exist, it's implementation dependent whether this method throws a PathNotFoundException or a
		/// PathNotFoundException is thrown when the returned directory is used--different implementations do different
		/// things there.
		/// <p/>
		/// Not all implementations of Directory support serializing it as a string.  An exception is thrown if it's not
		/// supported.
		/// </summary>
		/// <param name="directoryPathString">
		/// @return </param>
		public abstract Directory getDirectory(string directoryPathString);

		/// <summary>
		/// Get the test output directory for the specified test name.  This directory is normally under
		/// <projectBase>/target/test-output/<testName>.  Any existing directory will have its contents deleted by this
		/// method, before returning.  The idea here is that test output sticks around after the tests are run, so it can be
		/// inspected to maybe do some debugging.  But it's under "target" so it shouldn't show up as new files for source
		/// control, just intermediate output generated by the build.
		/// </summary>
		/// <param name="testName"> test name, used as part of directory name </param>
		/// <returns> directory to hold test output </returns>
		public virtual Directory getTestOutputDirectory(string testName)
		{
			Directory projectDirectory = Paths.Instance.ApplicationDataDirectory;
			Directory testOutputBase = projectDirectory.createDirectory("target").createDirectory("test-output");

			Directory testOutputDirectory = testOutputBase.createDirectory(testName);
			testOutputDirectory.deleteContents();
			return testOutputDirectory;
		}
	}

}