package jsimple.io;

import org.jetbrains.annotations.Nullable;

/**
 * @author Bret Johnson
 * @since 3/15/13 10:52 PM
 */
public class Paths extends PathsBase {
    /**
     * This method is defined to return the directory where the application should store its private data.  In Java,
     * there's no standard way to do exactly that so we return user.dir, which is the working directory (the current
     * directory) when the process was started.
     *
     * @return the directory where the application should store its private data
     */
    public static Directory getApplicationDataDirectory() {
        @Nullable String workingDirectory = System.getProperty("user.dir");
        if (workingDirectory == null)
            throw new IOException("user.dir is unset for some reason; working directory not specified by the JVM");

        return new FileSystemDirectory(workingDirectory);
    }

    public static Directory getDirectory(String directoryPathString) {
        return new FileSystemDirectory(directoryPathString);
    }

    /**
     * Get the test output directory for the specified test name.  This directory is normally under
     * <projectBase>/target/test-output/<testName>.  Any existing directory will have its contents deleted by this
     * method, before returning.  The idea here is that test output sticks around after the tests are run, so it can be
     * inspected to maybe do some debugging.  But it's under "target" so it shouldn't show up as new files for source
     * control, just intermediate output generated by the build.
     *
     * @param testName test name, used as part of directory name
     * @return directory to hold test output
     */
    public static Directory getTestOutputDirectory(String testName) {
        Directory projectDirectory = Paths.getApplicationDataDirectory();
        Directory testOutputBase = projectDirectory.getOrCreateDirectory("target").getOrCreateDirectory("test-output");

        return testOutputBase.getOrCreateDirectory(testName);
    }
}
