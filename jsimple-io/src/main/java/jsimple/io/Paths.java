package jsimple.io;

/**
 * Created with IntelliJ IDEA.
 *
 * @author Bret Johnson
 * @since 1/19/13 4:31 PM
 */
public abstract class Paths {
    public static JavaPaths instance = null;

    public static JavaPaths getInstance() {
        return instance;
    }

    /**
     * @return the directory where the application should store its private data.
     */
    public abstract Directory getApplicationDataDirectory();

    /**
     * Return the Directory object corresponding to the string serialized representation.  If the directory doesn't
     * exist, it's implementation dependent whether this method throws a PathNotFoundException or a
     * PathNotFoundException is thrown when the returned directory is used--different implementations do different
     * things there.
     * <p/>
     * Not all implementations of Directory support serializing it as a string.  An exception is thrown if it's
     * not supported.
     *
     * @param directoryString
     * @return
     */
    public abstract Directory getDirectory(String directoryPathString);

    /**
     * Get the test output directory for the specified test name.  This directory is normally under
     * <projectBase>/target/test-output/<testName>.  Any existing directory will have its contents deleted by this
     * method, before returning.  The idea here is that test output sticks around after the tests are run, so it can be
     * inspected to maybe do some debugging.  But it's under "target" so it shouldn't show up as new files for source
     * control, just intermediate output generated by the build.
     *
     * @param testName test name, used as part of directory name
     * @return directory to hold test output
     */
    public Directory getTestOutputDirectory(String testName) {
        Directory projectDirectory = JavaPaths.getInstance().getApplicationDataDirectory();
        Directory testOutputBase = projectDirectory.getOrCreateDirectory("target").getOrCreateDirectory("test-output");

        Directory testOutputDirectory = testOutputBase.getOrCreateDirectory(testName);
        testOutputDirectory.deleteContents();
        return testOutputDirectory;
    }
}
